"""
Main application entry point.
Orchestrates the trading bot components.
"""

import asyncio
import logging
import signal
import sys
from .config import load_config
from .binance_handler import BinanceHandler
from .ai_factory import AIFactory
from .functionSelector import FunctionSelector

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


class TradingBotApp:
    """Main application class."""
    
    def __init__(self):
        """Initialize the trading bot application."""
        self.config = None
        self.binance = None
        self.ai_handler = None
        self.function_selector = None
        self.running = False
    
    async def start(self):
        """Start the trading bot application."""
        try:
            # Load configuration
            logger.info("Loading configuration...")
            self.config = load_config()
            
            # Initialize components
            logger.info("Initializing trading components...")
            self.binance = BinanceHandler(self.config)
            self.ai_handler = AIFactory.create_handler(self.config)
            self.function_selector = FunctionSelector(self.config, self.binance, self.ai_handler)
            
            # Start console interface
            logger.info("Starting console interface...")
            await self._show_welcome()
            await self._console_loop()
            
        except Exception as e:
            logger.error(f"Error starting application: {e}")
            await self.stop()
            raise
    
    async def stop(self):
        """Stop the trading bot application."""
        logger.info("Shutting down trading bot...")
        self.running = False
        logger.info("Trading bot stopped.")
    
    async def _show_welcome(self):
        """Show welcome message."""
        print("\n" + "="*60)
        print("🤖 CRYPTO TRADING BOT - CONSOLE MODE")
        print("="*60)
        print("💡 Commands:")
        print("   /help     - Show help")
        print("   /status   - System status")
        print("   /ai       - AI provider status")
        print("   /test     - Test intent classification")
        print("   /quit     - Exit bot")
        print("")
        print("💬 Ask me anything:")
        print("   'What's the current BTC price?'")
        print("   'How much USDT do I have?'")
        print("   'What's my portfolio worth?'")
        print("   'Should I buy Bitcoin now?'")
        print("   'What's the market trend?'")
        print("="*60)
        print("⚠️  Note: All trades require your confirmation!")
        print("="*60 + "\n")
    
    async def _console_loop(self):
        """Main console interaction loop."""
        self.running = True
        
        while self.running:
            try:
                # Get user input
                user_input = input("💬 You: ").strip()
                
                if not user_input:
                    continue
                
                # Process the input
                if user_input.startswith('/'):
                    await self._handle_command(user_input)
                else:
                    await self._handle_natural_language(user_input)
                    
            except KeyboardInterrupt:
                print("\n👋 Goodbye!")
                break
            except EOFError:
                print("\n👋 Goodbye!")
                break
            except Exception as e:
                print(f"❌ Error: {e}")
                logger.error(f"Console error: {e}")
    
    async def _handle_command(self, command: str):
        """Handle console commands."""
        command = command.lower().strip()
        
        if command == '/help':
            await self._show_welcome()
            
        elif command == '/quit' or command == '/exit':
            print("👋 Shutting down...")
            self.running = False
        
        else:
            # All other commands are handled by function selector
            await self._handle_natural_language(command)
    
    async def _handle_natural_language(self, text: str):
        """Handle natural language queries using function selector."""
        try:
            print("🤖 Analyzing your request...")
            
            # Use function selector to process the request
            result = await self.function_selector.process_user_request(text)
            
            # Display the response
            print(f"\n🤖 Bot:")
            print(result["message"])
            
            # Handle trade confirmation if needed
            if result.get("requires_trade_confirmation", False) and result.get("data"):
                analysis = result["data"]
                if hasattr(analysis, 'intention') and analysis.intention in ["buy", "sell"]:
                    print(f"\n🔄 Proposed Action: {analysis.intention.upper()} {analysis.amount} BTC")
                    
                    if self.config.enable_trading:
                        confirm = input("❓ Execute this trade? (yes/no): ").lower().strip()
                        if confirm in ['yes', 'y']:
                            print("✅ Trade confirmation received. Execution would be handled by function selector.")
                        else:
                            print("❌ Trade cancelled.")
                    else:
                        print("ℹ️ Trading is disabled. Enable it in config to execute trades.")
            
            # Show intent info if available
            if "intent_info" in result:
                intent_info = result["intent_info"]
                print(f"\n🔍 Intent: {intent_info['intent']} (confidence: {intent_info['confidence']:.2f})")
            
            print("")  # Add spacing
            
        except Exception as e:
            print(f"❌ Error processing request: {e}")
            logger.error(f"Natural language error: {e}")
    
    def handle_signal(self, signum, frame):
    
    async def _show_status(self):
        """Show system status."""
        print("🤖 Bot: 🔄 System Status:")
        
        # Check AI provider
        try:
            ai_status = await self.ai_handler.health_check()
            provider_name = self.config.ai_provider.upper()
            status = "✅ Online" if ai_status else "❌ Offline"
            print(f"  🤖 {provider_name} AI: {status}")
        except:
            print(f"  🤖 AI: ❌ Error")
        
        # Check Binance
        try:
            await self.binance.get_current_btc_price()
            print(f"  📈 Binance API: ✅ Online")
        except Exception:
            print(f"  📈 Binance API: ❌ Offline")
        
        print(f"  🔒 Trading: {'✅ Enabled' if self.config.enable_trading else '❌ Disabled'}")
        print(f"  🧪 Testnet: {'Yes' if self.config.binance_testnet else 'No'}")
    
    async def _show_ai_status(self):
        """Show AI provider status."""
        try:
            health_results = await AIFactory.test_provider_health(self.config)
            
            print("🤖 Bot: 🤖 AI Provider Status:")
            print(f"  Current Provider: {self.config.ai_provider.upper()}")
            
            for provider, is_healthy in health_results.items():
                status = "✅ Available" if is_healthy else "❌ Unavailable"
                print(f"  • {provider.upper()}: {status}")
                
                if provider == "ollama" and is_healthy:
                    print(f"    Model: {self.config.ollama_model}")
                elif provider == "openai" and is_healthy:
                    print(f"    Model: {self.config.openai_model}")
                elif provider == "gemini" and is_healthy:
                    print(f"    Model: {self.config.gemini_model}")
            
            print("  ℹ️ To change AI provider, update AI_PROVIDER in .env file")
            
        except Exception as e:
            print(f"❌ Error checking AI status: {e}")
    
    async def _test_intent_classification(self):
        """Test the intent classification system."""
        print("🧪 Testing Function Selector System")
        print("="*50)
        
        test_messages = [
            "What's the current BTC price?",
            "How much USDT do I have?",
            "What's my portfolio worth?",
            "Should I buy Bitcoin now?",
            "Is it risky to trade now?",
            "Give me trading advice",
            "Market is too volatile",
            "Should I rebalance my portfolio?",
            "What can this bot do?",
            "xyzabc123nonsense"
        ]
        
        for message in test_messages:
            try:
                print(f"\n📝 Testing: '{message}'")
                
                # Use function selector to process the request
                result = await self.function_selector.process_user_request(message)
                
                print(f"🎯 Response Type: {result['response_type']}")
                print(f"✅ Success: {result['success']}")
                
                if "intent_info" in result:
                    intent_info = result["intent_info"]
                    print(f"🔍 Intent: {intent_info['intent']}")
                    print(f"🔍 Confidence: {intent_info['confidence']:.2f}")
                    print(f"📄 Function Used: {intent_info['function_used']}")
                
                # Show abbreviated response
                response_preview = result["message"][:100] + "..." if len(result["message"]) > 100 else result["message"]
                print(f"� Response Preview: {response_preview}")
                
            except Exception as e:
                print(f"❌ Error testing '{message}': {e}")
        
        print("\n✅ Function selector test completed!")
    
    
    def handle_signal(self, signum, frame):
        """Handle shutdown signals."""
        logger.info(f"Received signal {signum}, shutting down...")
        asyncio.create_task(self.stop())"""Handle shutdown signals."""
        logger.info(f"Received signal {signum}, shutting down...")
        asyncio.create_task(self.stop())


async def main():
    """Main entry point."""
    app = TradingBotApp()
    
    # Set up signal handlers
    signal.signal(signal.SIGINT, app.handle_signal)
    signal.signal(signal.SIGTERM, app.handle_signal)
    
    try:
        await app.start()
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt")
    except Exception as e:
        logger.error(f"Application error: {e}")
        sys.exit(1)
    finally:
        await app.stop()


if __name__ == "__main__":
    asyncio.run(main())
